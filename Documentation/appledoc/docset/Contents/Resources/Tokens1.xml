<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AFHTTPClient.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AFHTTPClient</TokenIdentifier>
			<Abstract>AFHTTPClient captures the common patterns of communicating with an web application over HTTP. It encapsulates information like base URL, authorization credentials, and HTTP headers, and uses them to construct and manage the execution of HTTP request operations.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/setBaseURL:</TokenIdentifier>
			<Abstract>The url used as the base for paths specified in methods such as getPath:parameteres:success:failure</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, retain) NSURL *baseURL</Declaration>
			
			
			<Anchor>//api/name/baseURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFHTTPClient/baseURL</TokenIdentifier>
			<Abstract>The url used as the base for paths specified in methods such as getPath:parameteres:success:failure</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, retain) NSURL *baseURL</Declaration>
			
			
			<Anchor>//api/name/baseURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/setStringEncoding:</TokenIdentifier>
			<Abstract>The string encoding used in constructing url requests. This is NSUTF8StringEncoding by default.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) NSStringEncoding stringEncoding</Declaration>
			
			
			<Anchor>//api/name/stringEncoding</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFHTTPClient/stringEncoding</TokenIdentifier>
			<Abstract>The string encoding used in constructing url requests. This is NSUTF8StringEncoding by default.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) NSStringEncoding stringEncoding</Declaration>
			
			
			<Anchor>//api/name/stringEncoding</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/setParameterEncoding:</TokenIdentifier>
			<Abstract>The AFHTTPClientParameterEncoding value corresponding to how parameters are encoded into a request body. This is AFFormURLParameterEncoding by default.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) AFHTTPClientParameterEncoding parameterEncoding</Declaration>
			
			
			<Anchor>//api/name/parameterEncoding</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFHTTPClient/parameterEncoding</TokenIdentifier>
			<Abstract>The AFHTTPClientParameterEncoding value corresponding to how parameters are encoded into a request body. This is AFFormURLParameterEncoding by default.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) AFHTTPClientParameterEncoding parameterEncoding</Declaration>
			
			
			<Anchor>//api/name/parameterEncoding</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/setOperationQueue:</TokenIdentifier>
			<Abstract>The operation queue which manages operations enqueued by the HTTP client.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, retain) NSOperationQueue *operationQueue</Declaration>
			
			
			<Anchor>//api/name/operationQueue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFHTTPClient/operationQueue</TokenIdentifier>
			<Abstract>The operation queue which manages operations enqueued by the HTTP client.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, retain) NSOperationQueue *operationQueue</Declaration>
			
			
			<Anchor>//api/name/operationQueue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AFHTTPClient/clientWithBaseURL:</TokenIdentifier>
			<Abstract>Creates and initializes an AFHTTPClient object with the specified base URL.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>+ (AFHTTPClient *)clientWithBaseURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract>The base URL for the HTTP client. This argument must not be nil.
  </Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The newly-initialized HTTP client</Abstract></ReturnValue>
			<Anchor>//api/name/clientWithBaseURL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/initWithBaseURL:</TokenIdentifier>
			<Abstract>Initializes an AFHTTPClient object with the specified base URL.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (id)initWithBaseURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract>The base URL for the HTTP client. This argument must not be nil.

@discussion This is the designated initializer.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The newly-initialized HTTP client</Abstract></ReturnValue>
			<Anchor>//api/name/initWithBaseURL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/setReachabilityStatusChangeBlock:</TokenIdentifier>
			<Abstract>Sets a callback to be executed when the network availability of the baseURL host changes.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)setReachabilityStatusChangeBlock:(void ( ^ ) ( BOOL isNetworkReachable ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>A block object to be executed when the network availability of the baseURL host changes.. This block has no return value and takes a single argument, which is YES if the host is available, otherwise NO.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setReachabilityStatusChangeBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/registerHTTPOperationClass:</TokenIdentifier>
			<Abstract>Attempts to register a subclass of AFHTTPRequestOperation, adding it to a chain to automatically generate request operations from a URL request.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (BOOL)registerHTTPOperationClass:(Class)operationClass</Declaration>
			<Parameters>
				<Parameter>
					<Name>The</Name>
					<Abstract>subclass of AFHTTPRequestOperation to register</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if the registration is successful, NO otherwise. The only failure condition is if operationClass does is not a subclass of AFHTTPRequestOperation.

@discussion When enqueueHTTPRequestOperationWithRequest:success:failure is invoked, each registered class is consulted in turn to see if it can handle the specific request. The first class to return YES when sent a canProcessRequest: message is used to create an operation using initWithURLRequest: and do setCompletionBlockWithSuccess:failure:. There is no guarantee that all registered classes will be consulted. Classes are consulted in the reverse order of their registration. Attempting to register an already-registered class will move it to the top of the list.</Abstract></ReturnValue>
			<Anchor>//api/name/registerHTTPOperationClass:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/unregisterHTTPOperationClass:</TokenIdentifier>
			<Abstract>Unregisters the specified subclass of AFHTTPRequestOperation.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)unregisterHTTPOperationClass:(Class)operationClass</Declaration>
			<Parameters>
				<Parameter>
					<Name>The</Name>
					<Abstract>class conforming to the AFHTTPClientOperation protocol to unregister

@discussion After this method is invoked, operationClass is no longer consulted when requestWithMethod:path:parameters is invoked.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/unregisterHTTPOperationClass:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/defaultValueForHeader:</TokenIdentifier>
			<Abstract>Returns the value for the HTTP headers set in request objects created by the HTTP client.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (NSString *)defaultValueForHeader:(NSString *)header</Declaration>
			<Parameters>
				<Parameter>
					<Name>header</Name>
					<Abstract>The HTTP header to return the default value for</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The default value for the HTTP header, or nil if unspecified</Abstract></ReturnValue>
			<Anchor>//api/name/defaultValueForHeader:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/setDefaultHeader:value:</TokenIdentifier>
			<Abstract>Sets the value for the HTTP headers set in request objects made by the HTTP client. If nil, removes the existing value for that header.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)setDefaultHeader:(NSString *)header value:(NSString *)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>header</Name>
					<Abstract>The HTTP header to set a default value for</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract>The value set as default for the specified header, or `nil</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDefaultHeader:value:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/setAuthorizationHeaderWithUsername:password:</TokenIdentifier>
			<Abstract>Sets the "Authorization" HTTP header set in request objects made by the HTTP client to a basic authentication value with Base64-encoded username and password. This overwrites any existing value for this header.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)setAuthorizationHeaderWithUsername:(NSString *)username password:(NSString *)password</Declaration>
			<Parameters>
				<Parameter>
					<Name>username</Name>
					<Abstract>The HTTP basic auth username</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract>The HTTP basic auth password</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAuthorizationHeaderWithUsername:password:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/setAuthorizationHeaderWithToken:</TokenIdentifier>
			<Abstract>Sets the "Authorization" HTTP header set in request objects made by the HTTP client to a token-based authentication value, such as an OAuth access token. This overwrites any existing value for this header.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)setAuthorizationHeaderWithToken:(NSString *)token</Declaration>
			<Parameters>
				<Parameter>
					<Name>token</Name>
					<Abstract>The authentication token</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAuthorizationHeaderWithToken:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/clearAuthorizationHeader</TokenIdentifier>
			<Abstract>Clears any existing value for the "Authorization" HTTP header.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)clearAuthorizationHeader</Declaration>
			
			
			<Anchor>//api/name/clearAuthorizationHeader</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/requestWithMethod:path:parameters:</TokenIdentifier>
			<Abstract>Creates an NSMutableURLRequest object with the specified HTTP method and path.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (NSMutableURLRequest *)requestWithMethod:(NSString *)method path:(NSString *)path parameters:(NSDictionary *)parameters</Declaration>
			<Parameters>
				<Parameter>
					<Name>method</Name>
					<Abstract>The HTTP method for the request, such as GET, POST, PUT, or DELETE.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract>The path to be appended to the HTTP client's base URL and used as the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract>The parameters to be either set as a query string for GET requests, or the request HTTP body.
  </Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>An NSMutableURLRequest object</Abstract></ReturnValue>
			<Anchor>//api/name/requestWithMethod:path:parameters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/multipartFormRequestWithMethod:path:parameters:constructingBodyWithBlock:</TokenIdentifier>
			<Abstract>Creates an NSMutableURLRequest object with the specified HTTP method and path, and constructs a multipart/form-data HTTP body, using the specified parameters and multipart form data block. See http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.2</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (NSMutableURLRequest *)multipartFormRequestWithMethod:(NSString *)method path:(NSString *)path parameters:(NSDictionary *)parameters constructingBodyWithBlock:(void ( ^ ) ( id&lt;AFMultipartFormData&gt; formData ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>method</Name>
					<Abstract>The HTTP method for the request. Must be either POST, PUT, or DELETE.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract>The path to be appended to the HTTP client's base URL and used as the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract>The parameters to be encoded and set in the request HTTP body.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract>A block that takes a single argument and appends data to the HTTP body. The block argument is an object adopting the AFMultipartFormData protocol. This can be used to upload files, encode HTTP body as JSON or XML, or specify multiple values for the same parameter, as one might for array values.
  
@discussion The multipart form data is constructed synchronously in the specified block, so in cases where large amounts of data are being added to the request, you should consider performing this method in the background. Likewise, the form data is constructed in-memory, so it may be advantageous to instead write parts of the form data to a file and stream the request body using the HTTPBodyStream property of NSURLRequest.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>An NSMutableURLRequest object</Abstract></ReturnValue>
			<Anchor>//api/name/multipartFormRequestWithMethod:path:parameters:constructingBodyWithBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/HTTPRequestOperationWithRequest:success:failure:</TokenIdentifier>
			<Abstract>Creates an AFHTTPRequestOperation.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (AFHTTPRequestOperation *)HTTPRequestOperationWithRequest:(NSURLRequest *)request success:(void ( ^ ) ( AFHTTPRequestOperation *operation , id responseObject ))success failure:(void ( ^ ) ( AFHTTPRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract>The request object to be loaded asynchronously during execution of the operation.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract>A block object to be executed when the request operation finishes successfully. This block has no return value and takes two arguments: the created request operation and the object created from the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract>A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/HTTPRequestOperationWithRequest:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/enqueueHTTPRequestOperation:</TokenIdentifier>
			<Abstract>Enqueues an AFHTTPRequestOperation to the HTTP client's operation queue.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)enqueueHTTPRequestOperation:(AFHTTPRequestOperation *)operation</Declaration>
			<Parameters>
				<Parameter>
					<Name>operation</Name>
					<Abstract>The HTTP request operation to be enqueued.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enqueueHTTPRequestOperation:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/cancelAllHTTPOperationsWithMethod:path:</TokenIdentifier>
			<Abstract>Cancels all operations in the HTTP client's operation queue whose URLs match the specified HTTP method and path.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)cancelAllHTTPOperationsWithMethod:(NSString *)method path:(NSString *)path</Declaration>
			<Parameters>
				<Parameter>
					<Name>method</Name>
					<Abstract>The HTTP method to match for the cancelled requests, such as GET, POST, PUT, or DELETE. If nil, all request operations with URLs matching the path will be cancelled.</Abstract>
				</Parameter><Parameter>
					<Name>url</Name>
					<Abstract>The path to match for the cancelled requests.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cancelAllHTTPOperationsWithMethod:path:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/enqueueBatchOfHTTPRequestOperationsWithRequests:progressBlock:completionBlock:</TokenIdentifier>
			<Abstract>Creates and enqueues an AFHTTPRequestOperation to the HTTP client's operation queue for each specified request object into a batch. When each request operation finishes, the specified progress block is executed, until all of the request operations have finished, at which point the completion block also executes.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)enqueueBatchOfHTTPRequestOperationsWithRequests:(NSArray *)requests progressBlock:(void ( ^ ) ( NSUInteger numberOfCompletedOperations , NSUInteger totalNumberOfOperations ))progressBlock completionBlock:(void ( ^ ) ( NSArray *operations ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>requests</Name>
					<Abstract>The NSURLRequest objects used to create and enqueue operations.</Abstract>
				</Parameter><Parameter>
					<Name>progressBlock</Name>
					<Abstract>A block object to be executed upon the completion of each request operation in the batch. This block has no return value and takes two arguments: the number of operations that have already finished execution, and the total number of operations.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract>A block object to be executed upon the completion of all of the request operations in the batch. This block has no return value and takes a single argument: the batched request operations.

@discussion Operations are created by passing the specified NSURLRequest objects in requests, using HTTPRequestOperationWithRequest:success:failure:, with nil for both the success and failure parameters.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enqueueBatchOfHTTPRequestOperationsWithRequests:progressBlock:completionBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/enqueueBatchOfHTTPRequestOperations:progressBlock:completionBlock:</TokenIdentifier>
			<Abstract>Enqueues the specified request operations into a batch. When each request operation finishes, the specified progress block is executed, until all of the request operations have finished, at which point the completion block also executes.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)enqueueBatchOfHTTPRequestOperations:(NSArray *)operations progressBlock:(void ( ^ ) ( NSUInteger numberOfCompletedOperations , NSUInteger totalNumberOfOperations ))progressBlock completionBlock:(void ( ^ ) ( NSArray *operations ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>operations</Name>
					<Abstract>The request operations used to be batched and enqueued.</Abstract>
				</Parameter><Parameter>
					<Name>progressBlock</Name>
					<Abstract>A block object to be executed upon the completion of each request operation in the batch. This block has no return value and takes two arguments: the number of operations that have already finished execution, and the total number of operations.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract>A block object to be executed upon the completion of all of the request operations in the batch. This block has no return value and takes a single argument: the batched request operations.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enqueueBatchOfHTTPRequestOperations:progressBlock:completionBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/getPath:parameters:success:failure:</TokenIdentifier>
			<Abstract>Creates an AFHTTPRequestOperation with a GET request, and enqueues it to the HTTP client's operation queue.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)getPath:(NSString *)path parameters:(NSDictionary *)parameters success:(void ( ^ ) ( AFHTTPRequestOperation *operation , id responseObject ))success failure:(void ( ^ ) ( AFHTTPRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract>The path to be appended to the HTTP client's base URL and used as the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract>The parameters to be encoded and appended as the query string for the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract>A block object to be executed when the request operation finishes successfully. This block has no return value and takes two arguments: the created request operation and the object created from the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract>A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getPath:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/postPath:parameters:success:failure:</TokenIdentifier>
			<Abstract>Creates an AFHTTPRequestOperation with a POST request, and enqueues it to the HTTP client's operation queue.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)postPath:(NSString *)path parameters:(NSDictionary *)parameters success:(void ( ^ ) ( AFHTTPRequestOperation *operation , id responseObject ))success failure:(void ( ^ ) ( AFHTTPRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract>The path to be appended to the HTTP client's base URL and used as the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract>The parameters to be encoded and set in the request HTTP body.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract>A block object to be executed when the request operation finishes successfully. This block has no return value and takes two arguments: the created request operation and the object created from the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract>A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/postPath:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/putPath:parameters:success:failure:</TokenIdentifier>
			<Abstract>Creates an AFHTTPRequestOperation with a PUT request, and enqueues it to the HTTP client's operation queue.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)putPath:(NSString *)path parameters:(NSDictionary *)parameters success:(void ( ^ ) ( AFHTTPRequestOperation *operation , id responseObject ))success failure:(void ( ^ ) ( AFHTTPRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract>The path to be appended to the HTTP client's base URL and used as the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract>The parameters to be encoded and set in the request HTTP body.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract>A block object to be executed when the request operation finishes successfully. This block has no return value and takes two arguments: the created request operation and the object created from the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract>A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/putPath:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPClient/deletePath:parameters:success:failure:</TokenIdentifier>
			<Abstract>Creates an AFHTTPRequestOperation with a DELETE request, and enqueues it to the HTTP client's operation queue.</Abstract>
			<DeclaredIn>AFHTTPClient.h</DeclaredIn>			
			
			<Declaration>- (void)deletePath:(NSString *)path parameters:(NSDictionary *)parameters success:(void ( ^ ) ( AFHTTPRequestOperation *operation , id responseObject ))success failure:(void ( ^ ) ( AFHTTPRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract>The path to be appended to the HTTP client's base URL and used as the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract>The parameters to be encoded and set in the request HTTP body.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract>A block object to be executed when the request operation finishes successfully. This block has no return value and takes two arguments: the created request operation and the object created from the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract>A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deletePath:parameters:success:failure:</Anchor>
		</Token>
		
	</File>
</Tokens>